{
  "React Voice Agent Component": {
    "prefix": "rva-component",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string;",
      "  ${2:prop}?: ${3:string};",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  className = '',",
      "  ${2:prop}",
      "}) => {",
      "  return (",
      "    <div className={`${4:container} \\${className}`}>",
      "      ${5:// Component content}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a React Voice Agent component with TypeScript"
  },
  "Voice Agent Hook": {
    "prefix": "rva-hook",
    "body": [
      "import { useState, useEffect, useCallback } from 'react';",
      "",
      "interface Use${1:HookName}State {",
      "  ${2:property}: ${3:string};",
      "  loading: boolean;",
      "  error: string | null;",
      "}",
      "",
      "interface Use${1:HookName}Actions {",
      "  ${4:action}: () => void;",
      "  reset: () => void;",
      "}",
      "",
      "export const use${1:HookName} = (): [Use${1:HookName}State, Use${1:HookName}Actions] => {",
      "  const [state, setState] = useState<Use${1:HookName}State>({",
      "    ${2:property}: ${5:''},",
      "    loading: false,",
      "    error: null",
      "  });",
      "",
      "  const ${4:action} = useCallback(() => {",
      "    // Implementation",
      "  }, []);",
      "",
      "  const reset = useCallback(() => {",
      "    setState({",
      "      ${2:property}: ${5:''},",
      "      loading: false,",
      "      error: null",
      "    });",
      "  }, []);",
      "",
      "  return [state, { ${4:action}, reset }];",
      "};"
    ],
    "description": "Create a Voice Agent React hook"
  },
  "Go Service Handler": {
    "prefix": "go-handler",
    "body": [
      "func ${1:HandlerName}(w http.ResponseWriter, r *http.Request) {",
      "\t// Set CORS headers",
      "\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")",
      "\tw.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")",
      "\tw.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")",
      "\tw.Header().Set(\"Content-Type\", \"application/json\")",
      "",
      "\tif r.Method == \"OPTIONS\" {",
      "\t\tw.WriteHeader(http.StatusOK)",
      "\t\treturn",
      "\t}",
      "",
      "\t${2:// Handler logic}",
      "",
      "\tresponse := map[string]interface{}{",
      "\t\t\"status\": \"success\",",
      "\t\t\"data\": ${3:nil},",
      "\t}",
      "",
      "\tjson.NewEncoder(w).Encode(response)",
      "}"
    ],
    "description": "Create a Go HTTP handler with CORS"
  },
  "Python Service Endpoint": {
    "prefix": "py-endpoint",
    "body": [
      "@app.route('/${1:endpoint}', methods=['${2:GET}', 'POST'])",
      "async def ${3:function_name}():",
      "    \"\"\"${4:Endpoint description}\"\"\"",
      "    try:",
      "        if request.method == 'POST':",
      "            data = await request.get_json()",
      "            # Process POST data",
      "            result = ${5:process_data(data)}",
      "        else:",
      "            # Handle GET request",
      "            result = ${6:get_data()}",
      "        ",
      "        return jsonify({",
      "            'status': 'success',",
      "            'data': result",
      "        })",
      "    except Exception as e:",
      "        logger.error(f'Error in ${3:function_name}: {str(e)}')",
      "        return jsonify({",
      "            'status': 'error',",
      "            'message': str(e)",
      "        }), 500"
    ],
    "description": "Create a Python Flask/FastAPI endpoint"
  },
  "Kubernetes Deployment": {
    "prefix": "k8s-deployment",
    "body": [
      "apiVersion: apps/v1",
      "kind: Deployment",
      "metadata:",
      "  name: ${1:service-name}",
      "  labels:",
      "    app: ${1:service-name}",
      "spec:",
      "  replicas: ${2:1}",
      "  selector:",
      "    matchLabels:",
      "      app: ${1:service-name}",
      "  template:",
      "    metadata:",
      "      labels:",
      "        app: ${1:service-name}",
      "    spec:",
      "      containers:",
      "      - name: ${1:service-name}",
      "        image: ${3:image-name}:${4:latest}",
      "        ports:",
      "        - containerPort: ${5:8080}",
      "        env:",
      "        - name: ${6:ENV_VAR}",
      "          value: \"${7:value}\"",
      "        resources:",
      "          requests:",
      "            memory: \"${8:64Mi}\"",
      "            cpu: \"${9:50m}\"",
      "          limits:",
      "            memory: \"${10:128Mi}\"",
      "            cpu: \"${11:100m}\""
    ],
    "description": "Create a Kubernetes deployment manifest"
  }
}