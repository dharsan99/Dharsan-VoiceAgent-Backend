// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/voice_agent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VoiceAgentService_StreamAudio_FullMethodName        = "/voice_agent.VoiceAgentService/StreamAudio"
	VoiceAgentService_SendControlMessage_FullMethodName = "/voice_agent.VoiceAgentService/SendControlMessage"
	VoiceAgentService_HealthCheck_FullMethodName        = "/voice_agent.VoiceAgentService/HealthCheck"
)

// VoiceAgentServiceClient is the client API for VoiceAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceAgentServiceClient interface {
	// Stream audio from Media Server to Orchestrator
	StreamAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, AudioResponse], error)
	// Control messages for pipeline management
	SendControlMessage(ctx context.Context, in *ControlMessage, opts ...grpc.CallOption) (*ControlResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type voiceAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceAgentServiceClient(cc grpc.ClientConnInterface) VoiceAgentServiceClient {
	return &voiceAgentServiceClient{cc}
}

func (c *voiceAgentServiceClient) StreamAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, AudioResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceAgentService_ServiceDesc.Streams[0], VoiceAgentService_StreamAudio_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AudioChunk, AudioResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceAgentService_StreamAudioClient = grpc.BidiStreamingClient[AudioChunk, AudioResponse]

func (c *voiceAgentServiceClient) SendControlMessage(ctx context.Context, in *ControlMessage, opts ...grpc.CallOption) (*ControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControlResponse)
	err := c.cc.Invoke(ctx, VoiceAgentService_SendControlMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceAgentServiceClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, VoiceAgentService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoiceAgentServiceServer is the server API for VoiceAgentService service.
// All implementations must embed UnimplementedVoiceAgentServiceServer
// for forward compatibility.
type VoiceAgentServiceServer interface {
	// Stream audio from Media Server to Orchestrator
	StreamAudio(grpc.BidiStreamingServer[AudioChunk, AudioResponse]) error
	// Control messages for pipeline management
	SendControlMessage(context.Context, *ControlMessage) (*ControlResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedVoiceAgentServiceServer()
}

// UnimplementedVoiceAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVoiceAgentServiceServer struct{}

func (UnimplementedVoiceAgentServiceServer) StreamAudio(grpc.BidiStreamingServer[AudioChunk, AudioResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudio not implemented")
}
func (UnimplementedVoiceAgentServiceServer) SendControlMessage(context.Context, *ControlMessage) (*ControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendControlMessage not implemented")
}
func (UnimplementedVoiceAgentServiceServer) HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedVoiceAgentServiceServer) mustEmbedUnimplementedVoiceAgentServiceServer() {}
func (UnimplementedVoiceAgentServiceServer) testEmbeddedByValue()                           {}

// UnsafeVoiceAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceAgentServiceServer will
// result in compilation errors.
type UnsafeVoiceAgentServiceServer interface {
	mustEmbedUnimplementedVoiceAgentServiceServer()
}

func RegisterVoiceAgentServiceServer(s grpc.ServiceRegistrar, srv VoiceAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedVoiceAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VoiceAgentService_ServiceDesc, srv)
}

func _VoiceAgentService_StreamAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoiceAgentServiceServer).StreamAudio(&grpc.GenericServerStream[AudioChunk, AudioResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceAgentService_StreamAudioServer = grpc.BidiStreamingServer[AudioChunk, AudioResponse]

func _VoiceAgentService_SendControlMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceAgentServiceServer).SendControlMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceAgentService_SendControlMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceAgentServiceServer).SendControlMessage(ctx, req.(*ControlMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceAgentService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceAgentServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceAgentService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceAgentServiceServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoiceAgentService_ServiceDesc is the grpc.ServiceDesc for VoiceAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice_agent.VoiceAgentService",
	HandlerType: (*VoiceAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendControlMessage",
			Handler:    _VoiceAgentService_SendControlMessage_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _VoiceAgentService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudio",
			Handler:       _VoiceAgentService_StreamAudio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/voice_agent.proto",
}
